// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package pets

import (
	"context"
	"database/sql"
)

const addCategory = `-- name: AddCategory :execresult
insert into categories(name) values (?)
`

func (q *Queries) AddCategory(ctx context.Context, name sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, addCategory, name)
}

const addPet = `-- name: AddPet :execresult
insert into pets(name,photo_url,status,category) values(?,?,?,?)
`

type AddPetParams struct {
	Name     string         `json:"name"`
	PhotoUrl sql.NullString `json:"photo_url"`
	Status   string         `json:"status"`
	Category sql.NullInt32  `json:"category"`
}

func (q *Queries) AddPet(ctx context.Context, arg AddPetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPet,
		arg.Name,
		arg.PhotoUrl,
		arg.Status,
		arg.Category,
	)
}

const addPetTag = `-- name: AddPetTag :execresult
insert into pet_tags(pet_id,tag_id) values(?,?)
`

type AddPetTagParams struct {
	PetID int32 `json:"pet_id"`
	TagID int32 `json:"tag_id"`
}

func (q *Queries) AddPetTag(ctx context.Context, arg AddPetTagParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addPetTag, arg.PetID, arg.TagID)
}

const addTag = `-- name: AddTag :execresult
INSERT INTO tags(name) values (?)
`

func (q *Queries) AddTag(ctx context.Context, name sql.NullString) (sql.Result, error) {
	return q.db.ExecContext(ctx, addTag, name)
}

const getCategoryByName = `-- name: GetCategoryByName :one
select id, name from categories where categories.name = ?
`

func (q *Queries) GetCategoryByName(ctx context.Context, name sql.NullString) (*Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getTagByName = `-- name: GetTagByName :one
select id, name from tags where tags.name = ?
`

func (q *Queries) GetTagByName(ctx context.Context, name sql.NullString) (*Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}
